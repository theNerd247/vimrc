
###########################################################################
#                            TextMate Snippets                            #
###########################################################################

#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif

snippet #if "#if #endif" !b 
#if ${1:0}
${VISUAL:code}$0
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)" t
int main(int argc, char const *argv[])
{
  ${0:/* code */}
	return 0;
}
endsnippet

snippet for "for int loop (fori)"
${1:size_t} ${2:i};
for($2 = ${3:0}; $2 < ${4:count}; ${5:$2++})
{
${0:/* code */}
}
endsnippet

snippet enum "Enumeration" t
enum ${1:name} 
{ 
	$0
};
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif 

endsnippet

snippet typedef "typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet do "do...while loop (do)"
do 
{
	${0:/* code */}
}while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)" t
if(${1:/* condition */})
{
	${0:/* code */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet struct "struct" t
struct ${1:/* struct name */}
{
	${0:/* data */}
};
endsnippet

snippet author "/*author info*/"
/**
 * @file `!v expand('%:t')` 
 *
 * ${0:description}
 *
 * @author ${1:author_name} (${2:email@example.com})
 * @copyright ${3:GNU Public License 2}
 */
endsnippet

snippet func "creates new function and documentation"
/**
 * @brief ${6:a brief description}
 * 
 * ${7:details}
 *
 * ${3/([\w]+\*{0,1})\s\&{0,1}([\w]+)[\[.*\]]*,{0,1}/@param $2 - \n */g}
 * @return $1 - ${5:description}
 * 
 */
${0}${1:void} ${2:func_name}(${3:void});
endsnippet

snippet docb "block"
//--${1:title}------------------------------
${0:/*code*/}
//--END $1---------------------------
endsnippet

snippet malloc "malloc"
(${1}*)malloc(sizeof($1)${0});
endsnippet

snippet switch "switch statement" t
switch(${1:val})
{
${0:
	default:
		break;}
}
endsnippet

snippet case "case for switches" t
case ${1:val}: 
	${2}
	break;${0}
endsnippet

snippet helper "creates helper func prototype" t
///helper function for ${1:func}
/** 
 * @brief ${2:I help $1} 
 * 
 * ${5/([\w]+\*{0,1})\s\&{0,1}([\w]+)[\[.*\]]*,{0,1}/@param $2 - \n/g}
 * @return $3
 */
${3:void} ${4:helper}(${5})${0}
endsnippet

snippet docl "creates a documentation block"  t
/* ${1:comment} */
endsnippet

snippet docln "creates a documentation block"  t
/**< ${1:comment} */
endsnippet

snippet errln "inserts std error doc" t
${1:0}: ${2:no error}; ${3:1}: ${4:error occured}
endsnippet

snippet while "a while loop" t
while(${1:/* condition */})
{
	$0
}
endsnippet
# vim:ft=snippets:
