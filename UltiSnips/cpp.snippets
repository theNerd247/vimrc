extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)" t
/** ${6:brief description}
 *
 * ${7:class details}
 *
 */
class ${1:`!p snip.rv = snip.basename or "name"`} ${3:: ${4:public} ${5:ClassName}}
{
	public:
		${1/(\w+).*/$1/}(${2:arguments}) {};
		virtual ~${1/(\w+).*/$1/}() {};
	
	private:
		${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet try "a try catch statement" t
try
{
	${1://code here}
}
catch(${2:...})
{
	${0://code here}
}
endsnippet

snippet template "templates" t
template<typename ${1:t1}${2:,typename ${3:t2}}>
endsnippet

snippet vec "std::vector" tw
std::vector<${1:Type}>$0
endsnippet

snippet foreach "boost foreach" t
foreach(${1:Type}& ${2:x}, ${3:xs})
{
	$0
}
endsnippet
# vim:ft=snippets:

